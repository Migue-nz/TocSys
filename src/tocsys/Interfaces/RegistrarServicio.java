package tocsys.Interfaces;

import com.mysql.cj.jdbc.CallableStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import tocsys.ConexionBD;
import java.sql.*;
import java.sql.Types;          // Para LONGNVARCHAR, VARCHAR, etc.
import javax.swing.JFrame;

/**
 *
 * @author Jesus
 */
public class RegistrarServicio extends javax.swing.JFrame {
    Servicios c;
    String busqueda = "";

    public void cargarServicios(String busqueda) {

        String sql = "SELECT nombre, descripcion, duracion FROM servicios WHERE nombre = ?";
        try (Connection conn = ConexionBD.obtenerConexion(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, busqueda);        // Primer parámetro (String)

            ResultSet rs = stmt.executeQuery();

// Verificar si hay resultados y mover el cursor a la primera fila
            if (rs.next()) { // Avanza a la primera fila (retorna true si hay datos)
                txtNom.setText(rs.getString("nombre")); // ✔️ Ahora sí funciona
                txtDesc.setText(rs.getString("descripcion"));
                String duracion = rs.getString("duracion");

                //debo cortar los minutos y las horas
                String horas = duracion.substring(0, 2);
                String minutos = duracion.substring(3, 5);

                jcbHoras.setSelectedItem(horas);
                jcbMinutos.setSelectedItem(minutos);
            } else {
                System.out.println("No se encontraron resultados.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void registroServicio(String p_nombre, String p_descripcion, String p_duracion) {
        String sql = "{call AgregarServicio(?, ?, ?, 1)}";

        try (
                java.sql.Connection conn = ConexionBD.obtenerConexion(); CallableStatement stmt = (CallableStatement) conn.prepareCall(sql)) {
            stmt.setString(1, p_nombre);        // Primer parámetro (String)
            stmt.setString(2, p_descripcion);   // Segundo parámetro (String)
            stmt.setString(3, p_duracion);         // Tercer parámetro (int)

            // 2. Ejecutar el procedimiento
            boolean tieneResultados = stmt.execute();
            String mensaje = "No se pudo agregar el servicio, error en el sistema";
            // 3. Procesar el mensaje de retorno (SELECT)
            if (tieneResultados) {
                try (ResultSet rs = stmt.getResultSet()) {
                    if (rs.next()) {
                        mensaje = rs.getString("mensaje");
                        System.out.println("Resultado: " + mensaje);
                    }
                }
            }
            JOptionPane.showMessageDialog(this, mensaje);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void actualizarServicio(String p_nomServicio, String p_nombre, String p_descripcion, String p_duracion) {
        String sql = "{call ActualizarServicio(?,?, ?, ?, ?)}";

        try (
                java.sql.Connection conn = ConexionBD.obtenerConexion(); CallableStatement stmt = (CallableStatement) conn.prepareCall(sql)) {
            stmt.setString(1, p_nomServicio);
            stmt.setString(2, p_nombre);
            stmt.setString(3, p_descripcion);
            stmt.setString(4, p_duracion);
            stmt.registerOutParameter(5, Types.LONGNVARCHAR);

            stmt.execute();
            String resultado = stmt.getString(5); // Leer parámetro OUT

            JOptionPane.showMessageDialog(this, resultado);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String getBusqueda() {
        return busqueda;
    }

    public void setBusqueda(String busqueda) {
        this.busqueda = busqueda;
    }

    /**
     * Creates new form AgregarServicio
     */
    public void config() {
        setResizable(false);
        setSize(400, 370);
        setLocationRelativeTo(null);

    }

    public RegistrarServicio(Servicios padre) {
        initComponents();
        c=padre;
        config();
        // esto recibe si va a registrar o actualziar, para usar la misma interfaz
        lblTitulo.setText("REGISTRAR SERVICIO");
    }

    public RegistrarServicio(String servBuscado,Servicios padre) {
        initComponents();
        c=padre;

        config();

        busqueda = servBuscado;
        //va a actualizazr los datos, cambiar el lbl 
        lblTitulo.setText("ACTUALIZAR SERVICIO");
        // debo traerme todos los datos de ese servicio para llenar los jtextfiels
        cargarServicios(busqueda);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtDesc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbHoras = new javax.swing.JComboBox<>();
        jcbMinutos = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(989, 369));
        setResizable(false);
        getContentPane().setLayout(null);

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        lblTitulo.setText("REGISTRAR SERVICIO");
        getContentPane().add(lblTitulo);
        lblTitulo.setBounds(6, 12, 360, 32);
        getContentPane().add(txtNom);
        txtNom.setBounds(6, 78, 361, 37);

        jLabel1.setText("NOMBRE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 60, 110, 16);
        getContentPane().add(txtDesc);
        txtDesc.setBounds(6, 154, 361, 65);

        jLabel2.setText("DESCRIPCION");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 130, 90, 16);

        jLabel3.setText("DURACIÓN");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 230, 70, 16);

        jcbHoras.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05" }));
        getContentPane().add(jcbHoras);
        jcbHoras.setBounds(10, 260, 72, 22);

        jcbMinutos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "10", "20", "30", "40", "50" }));
        getContentPane().add(jcbMinutos);
        jcbMinutos.setBounds(10, 290, 72, 22);

        jLabel4.setText("Horas");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(100, 260, 80, 16);

        jLabel6.setText("Minutos");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(100, 290, 44, 16);

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAceptar);
        btnAceptar.setBounds(260, 250, 102, 46);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        String nombre, descripcion, duracion;

        nombre = txtNom.getText();
        descripcion = txtDesc.getText();

        if (nombre.isBlank() || nombre.isEmpty() || descripcion.isBlank() || descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NO PUEDE DEJAR CAMPOS VACIOS");
            return;
        }

        //validacion de la longitud de los campos
        if (nombre.length() > 30) {
            JOptionPane.showMessageDialog(this, "EL NOMBRE SOLO PUEDE TENER 30 CARACTERES");
            return;
        }

        if (descripcion.length() > 200) {
            JOptionPane.showMessageDialog(this, "DESCRIPCIÓN MUY LARGA, SOLO PUEDE TENER 200 CARACTERES");
            return;
        }

        String minutos = jcbMinutos.getSelectedItem().toString();
        String horas = jcbHoras.getSelectedItem().toString();
        duracion = horas + ":" + minutos + ":00";

        if (duracion.equals("00:00:00")) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UNA DURACIÓN VÁLIDA");
            return;
        }

        if (!busqueda.isEmpty()) {
            actualizarServicio(busqueda, nombre, descripcion, duracion);
            txtDesc.setText("");
            txtNom.setText("");
            jcbHoras.setSelectedIndex(0);
            jcbMinutos.setSelectedIndex(0);
            c.cargarServiciosEnTabla();
            this.dispose();
            return;
        }
        //llamo al método para registrar, en caso de que no se esté buscando algo
        registroServicio(nombre, descripcion, duracion);

        //reestablecer datos
        txtDesc.setText("");
        txtNom.setText("");
        jcbHoras.setSelectedIndex(0);
        jcbMinutos.setSelectedIndex(0);
        c.cargarServiciosEnTabla();
    }//GEN-LAST:event_btnAceptarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarServicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarServicio(new Servicios()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> jcbHoras;
    private javax.swing.JComboBox<String> jcbMinutos;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtNom;
    // End of variables declaration//GEN-END:variables
}
